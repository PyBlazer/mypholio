import streamlit as st
import plotly.express as px
import requests as r
import pandas as pd
import random
import base64
from datetime import datetime

# ------------------ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ------------------
st.set_page_config(
    page_title="Maksim Androschuk | Pholio",
    page_icon="üá∫üá¶",
    layout="wide"
)
# ------------------ –°–∫—Ä—ã–≤–∞–µ–º –ª–∏—à–Ω–µ–µ ---------------------
hide_st_style = """
                <style>
                #MainMenu {visibility: hidden;}
                footer {visibility: hidden;}
                header {visibility: hidden;}
                .appview-container .main .block-container{padding-top: 1rem;}
                
                div[data-testid="stSidebarUserContent"] {
                    padding: 2rem 1.5rem !important;
                    with: 330px !important;
                }
                
                </style>
                """
st.markdown(hide_st_style, unsafe_allow_html=True)


def skills(skill_name, skill_lvl):
    bar = st.progress(0, text=skill_name)

    for percent_complete in range(skill_lvl):
        bar.progress(percent_complete + 1, text=skill_name)


def cloud_tag(text):
    words = text.split()

    # –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤
    random.shuffle(words)

    # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è HTML —Å –ø–æ–º–æ—â—å—é CSS
    styled_text = ""
    for word in words:
        # –°–ª—É—á–∞–π–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏ —Ç–æ–ª—â–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞
        font_size = random.randint(12, 24)
        font_thickness = random.randint(1, 5)
        line_height = random.uniform(1.0, 1.5)  # –†–∞–Ω–¥–æ–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è line-height

        styled_text += f'<span style="font-size: {font_size}px; font-weight: {font_thickness * 100}; margin: 5px; display: inline-block; line-height: {line_height};">{word}</span> '

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∫ –æ–±–ª–∞–∫—É —Ç–µ–≥–æ–≤
    st.markdown(
        f'<div style="display: flex; flex-wrap: wrap; align-items: center; justify-content: center;">{styled_text}</div>',
        unsafe_allow_html=True
    )


def copy():
    # –¢–µ–∫—Å—Ç –∫–æ–ø–∏—Ä–∞–π—Ç–∞
    copyright_text = (
            "&copy; " + str(datetime.now().year) + " Maskim Androschuk."
    )

    # –í—Å—Ç–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç–∞ –∫–æ–ø–∏—Ä–∞–π—Ç–∞ –≤ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
    st.sidebar.markdown(
        f'<div style="display: flex; flex-direction: column; align-items: center;">'
        f'<p>{copyright_text}</p>'
        f'</div>',
        unsafe_allow_html=True
    )


def brand_logo(file, caption):
    st.markdown(
        '''
        <style>
            .carousel-container { display: flex; overflow-x: auto; }
            .brand-logo-container { position: relative; }
            .brand-logo { filter: grayscale(100%); transition: filter 0.3s, opacity 0.3s; cursor: pointer; opacity: 0.5;}
            .brand-logo:hover { filter: grayscale(0%); opacity: 1; }
            .caption { text-align: center; padding: 5px; background-color: rgba(255, 255, 255, 0.7); opacity: 0; transition: opacity 0.3s; }
            .brand-logo-container:hover .caption { opacity: 1; }
        </style>
        ''',
        unsafe_allow_html=True
    )

    with st.markdown('<div class="carousel-container">', unsafe_allow_html=True):
        st.markdown(
            f'''
            <div class="brand-logo-container">
                <img class="brand-logo" src="data:image/png;base64,{base64.b64encode(open(file, "rb").read()).decode()}">
                <p class="caption">{caption}</p>
            </div>
            ''',
            unsafe_allow_html=True
        )


def get_age():
    dob_str = "06-05-1981"
    dob = datetime.strptime(dob_str, "%d-%m-%Y")
    current_date = datetime.now()
    age = current_date.year - dob.year - ((current_date.month, current_date.day) < (dob.month, dob.day))
    return age


def YesNo():
    data = r.get('https://yesno.wtf/api').json()
    return data


def BlockChain():
    data = r.get(
        'https://api.blockchain.info/charts/transactions-per-second?timespan=5weeks&rollingAverage=8hours&format=json').json()
    return data


def Exchange(date):
    data = r.get(f"https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?date={date}&json").json()
    return data


# ------- PAGES ----------------------
def page1():

    st.subheader("–í—Å—Ç—É–ø")

    text_1 = '''
        –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —Ç–∞ –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π **Python** —Ä–æ–∑—Ä–æ–±–Ω–∏–∫ –∑ —É—Å–ø—ñ—à–Ω–∏–º –¥–æ—Å–≤—ñ–¥–æ–º —É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –±–µ–∫–µ–Ω–¥—ñ–≤ —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—ñ –±–∞–∑–∞–º–∏ –¥–∞–Ω–∏—Ö.      
        –®—É–∫–∞—é –Ω–æ–≤—ñ –≤–∏–∫–ª–∏–∫–∏ —Ç–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –∫–æ–º–∞–Ω–¥–∏, –¥–µ –º–æ–∂–Ω–∞ –≤–Ω–µ—Å—Ç–∏ –∑–Ω–∞—á—É—â–∏–π –≤–Ω–µ—Å–æ–∫ —É —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π —Ä–æ–∑–≤–∏—Ç–æ–∫ —Ç–∞ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —Ü—ñ–ª–µ–π –ø—Ä–æ–µ–∫—Ç—ñ–≤.
    '''
    st.markdown(text_1)
    st.subheader("–ú—ñ–π –≤–Ω–µ—Å–æ–∫")
    text_2 = '''   
        - –ì–ª–∏–±–æ–∫—ñ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –∑–Ω–∞–Ω–Ω—è —Ç–∞ –≤–º—ñ–Ω–Ω—è –≤–¥–æ—Å–∫–æ–Ω–∞–ª—é–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å–∏ —Ä–æ–∑—Ä–æ–±–∫–∏.   
        - –ú–æ—î –±–∞–∂–∞–Ω–Ω—è –ø—Ä–∏–Ω–æ—Å–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—å —Ç–∞ –≤–ø—Ä–æ–≤–∞–¥–∂—É–≤–∞—Ç–∏ —ñ–Ω–Ω–æ–≤–∞—Ü—ñ—ó –≤ –ø—Ä–æ–µ–∫—Ç–∏ —Ä–æ–±–∏—Ç—å –º–µ–Ω–µ –≤—ñ–¥–º—ñ–Ω–Ω–∏–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º –¥–ª—è –≤–∞–∫–∞–Ω—Å—ñ—ó **Python** —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.   
        - –ì–æ—Ç–æ–≤–∏–π –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≤–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ –≤–Ω–µ—Å—Ç–∏ —Å–≤–æ—ó —Å–∏–ª—É —Ç–∞ –µ–∫—Å–ø–µ—Ä—Ç–∏–∑—É –¥–ª—è –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –≤–∞—à–∏—Ö —Ü—ñ–ª–µ–π.
    '''
    st.markdown(text_2)

    st.divider()
    col1, col2, col3, col4, col5, col6 = st.columns(6)
    with col1:
        brand_logo('img/mtm_logo.png', '–ö–æ–Ω—Ü–µ—Ä–Ω ¬´–ú—ñ—Å—å–∫—ñ —Ç–µ–ø–ª–æ–≤—ñ –º–µ—Ä–µ–∂—ñ¬ª')
    with col2:
        brand_logo('img/afarm_logo2.png', '–¢–û–í "–ê–õ–ï–ö–°–§–ê–†–ú"')
    with col3:
        brand_logo('img/zva_logo2.png', '–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∏–π –∑–∞–≤–æ–¥ –≤–∏—Å–æ–∫–æ–≤–æ–ª—å—Ç–Ω–æ—ó –∞–ø–∞—Ä–∞—Ç—É—Ä–∏')
    with col4:
        brand_logo('img/zpr_logo2.png', '–ü–ê–¢ "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∏–π –∑–∞–≤–æ–¥ "–ü–µ—Ä–µ—Ç–≤–æ—Ä—é–≤–∞—á"')
    with col5:
        brand_logo('img/uz_logo2.png', '–ê–∫—Ü—ñ–æ–Ω–µ—Ä–Ω–µ —Ç–æ–≤–∞—Ä–∏—Å—Ç–≤–æ ¬´–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –∑–∞–ª—ñ–∑–Ω–∏—Ü—è¬ª')
    with col6:
        brand_logo('img/pfu_logo2.png', '–ü–µ–Ω—Å—ñ–π–Ω–∏–π —Ñ–æ–Ω–¥ –£–∫—Ä–∞—ó–Ω–∏')
    st.divider()

    col_skils, col_lang, col_works = st.columns(3)
    with col_skils:
        st.subheader("–ù–∞–≤–∏—á–∫–∏")
        skills('python', 60)
        skills('php', 40)
        skills('delphi', 10)
        skills('js', 10)
    with col_lang:
        st.subheader("–ó–Ω–∞–Ω–Ω—è –º–æ–≤")
        skills('–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', 100)
        skills('English', 10)
        skills('–†—É—Å—Å–∫–∏–π', 100)
    with col_works:
        st.subheader("Hard & Soft skills")
        text = "ChatGPT REST API Joomla Wordpress Flask FastApi Django MSSQL MySql CSV Json Asterisk IZAR@NET2 Delphi JS HTML CSS Streamlit NodeRED GLPI pandas requests SNMP Dinstar CentOS Debian NGINX Apache Postman PuTTY"
        cloud_tag(text=text)
    st.divider()

    # –û—Å–≤—ñ—Ç–∞
    st.subheader("–û—Å–≤—ñ—Ç–∞")
    st.write("""- [**—ñ–Ω–∂–µ–Ω–µ—Ä-–ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç**] –ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –¥–µ—Ä–∂–∞–≤–Ω–∞ —ñ–Ω–∂–µ–Ω–µ—Ä–Ω–∞ –∞–∫–∞–¥–µ–º—ñ—è (–ó–î–Ü–ê), –°–∏—Å—Ç–µ–º–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è, –ó–∞–ø–æ—Ä—ñ–∂–∂—è, –∑ **2003**—Ä. –ø–æ **2009**—Ä.""")
    st.write("""- [**—Ç–µ—Ö–Ω—ñ–∫-–µ–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫**] –ó–∞–ø–æ—Ä—ñ–∑—å–∫–∏–π –∫–æ–ª–µ–¥–∂ —Ä–∞–¥—ñ–æ–µ–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∏ (–ó–ö–†), –û–±—á–∏—Å–ª—é–≤–∞–ª—å–Ω–∞ —Ç–µ—Ö–Ω—ñ–∫–∞, –ó–∞–ø–æ—Ä—ñ–∂–∂—è, –∑ **1996**—Ä. –ø–æ **2000**—Ä.""")


def page2():

    st.subheader("–°—Ü–µ–Ω–∞—Ä—ñ—ó —Ç–∞ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è")

    # –û–ø–∏—Å —Ä–æ–∑–¥—ñ–ª—É
    st.write("""
        –¶–µ–π —Ä–æ–∑–¥—ñ–ª –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –æ–ø–∏—Å—É —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤ –∑ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç—ñ–≤ —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó,
        —è–∫—ñ —Ä–æ–∑—Ä–æ–±–ª–µ–Ω—ñ –¥–ª—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–∞ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤—ñ. –¢—É—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ñ —Ä—ñ—à–µ–Ω–Ω—è, —è–∫—ñ
        —Å–ø—Ä—è–º–æ–≤–∞–Ω—ñ –Ω–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é —Ç–∞ –ø–æ–ª–µ–≥—à–µ–Ω–Ω—è —Ä—É—Ç–∏–Ω–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å, —â–æ –≤–∏–Ω–∏–∫–∞—é—Ç—å —É –ø—Ä–æ—Ü–µ—Å—ñ —Ä–æ–±–æ—Ç–∏.

        –û–ø–∏—Å–∞–Ω—ñ –ø—Ä–æ–µ–∫—Ç–∏ –≤–∫–ª—é—á–∞—é—Ç—å –≤ —Å–µ–±–µ —Ä—ñ–∑–Ω—ñ —Å–∫—Ä–∏–ø—Ç–∏ —Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–∏, —Å—Ç–≤–æ—Ä–µ–Ω—ñ –∑ –º–µ—Ç–æ—é –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è
        –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤ —Ç–∞ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤. –¶—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –º–æ–∂—É—Ç—å
        –æ—Ö–æ–ø–ª—é–≤–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é —Ä—É—Ç–∏–Ω–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å, —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—ñ–≤, –∞–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö, —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é —Ä—ñ–∑–Ω–∏—Ö
        —Å–∏—Å—Ç–µ–º —Ç–∞ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–æ–≥–æ.

        –ú–µ—Ç–∞ —Ü—å–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É - –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —ñ–Ω–Ω–æ–≤–∞—Ü—ñ–π–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –¥–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
        –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ä–æ–∑—Ä–æ–±–ª–µ–Ω—ñ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó —Ä–æ–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤
        —Ç–∞ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ.
    """)
    st.divider()
    st.subheader("–ê–†–ú –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ –∫–∞–±—ñ–Ω–µ—Ç—É")
    st.caption('Flask + Bootstrap')
    st.write("""
        –í–µ–±-–¥–æ–¥–∞—Ç–æ–∫, —Ä–æ–∑—Ä–æ–±–ª–µ–Ω–∏–π –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Flask —Ç–∞ Bootstrap, —è–∫–∏–π –¥–æ–∑–≤–æ–ª—è—î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ MSSQL –¥–æ MySQL –≤ –ø–µ–≤–Ω–∏–π —á–∞—Å, –æ–±—Ä–∞–Ω–æ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.

        –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –≤–∫–∞–∑–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –¥–∞—Ç—É, –∑ —è–∫–æ—ó —Ä–æ–∑–ø–æ—á–Ω–µ—Ç—å—Å—è –ø—Ä–æ—Ü–µ—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö. –î–æ–¥–∞—Ç–æ–∫ –Ω–∞–¥–∞—î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —è–∫ –≤—Å—ñ—î—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö, —Ç–∞–∫ —ñ —á–∞—Å—Ç–∫–æ–≤–æ, –≤–∏–±—Ä–∞–≤—à–∏ –ø–µ–≤–Ω—ñ —Å–µ–≥–º–µ–Ω—Ç–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.
        
        –û–∫—Ä—ñ–º —Ü—å–æ–≥–æ, –≤ –¥–æ–¥–∞—Ç–∫—É —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ª–æ–≥—ñ–≤ –ø—Ä–æ—Ü–µ—Å—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —â–æ–¥–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∞–±–æ –ø–æ–º–∏–ª–∫–æ–≤–∏—Ö –∫—Ä–æ–∫—ñ–≤ –ø—ñ–¥ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö. –¶–µ –¥–æ–ø–æ–º–∞–≥–∞—î –∑–∞–±–µ–∑–ø–µ—á–∏—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –ø—Ä–æ—Ü–µ—Å–æ–º —Ç–∞ —à–≤–∏–¥–∫–æ —Ä–µ–∞–≥—É–≤–∞—Ç–∏ –Ω–∞ –±—É–¥—å-—è–∫—ñ –ø—Ä–æ–±–ª–µ–º–∏.
        
        –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Bootstrap –Ω–∞–¥–∞—î –¥–æ–¥–∞—Ç–∫—É —Å—É—á–∞—Å–Ω–∏–π —Ç–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å, —â–æ –ø–æ–ª–µ–≥—à—É—î –≤–∑–∞—î–º–æ–¥—ñ—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑ –¥–æ–¥–∞—Ç–∫–æ–º –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—è—Ö.
    """)
    st.subheader("–ú–µ–Ω–µ–¥–∂–µ—Ä –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –î–∞–Ω–∏—Ö")
    st.caption('Delphi + RestAPI')
    st.write("""
        –í–ª–∞—Å–Ω–æ —Ä–æ–∑—Ä–æ–±–ª–µ–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º Delphi —Ç–∞ RestAPI –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó —ñ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å–æ–º —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö. –î–æ–¥–∞—Ç–æ–∫ —Å–ø—Ä—è–º–æ–≤–∞–Ω–∏–π –Ω–∞ –≤–∑–∞—î–º–æ–¥—ñ—é –∑—ñ —Å—Ç–æ—Ä–æ–Ω–Ω—ñ–º –ø—Ä–æ–≥—Ä–∞–º–Ω–∏–º –∑–∞—Å–æ–±–æ–º, —è–∫–∏–π –æ–ø–∏—Ç—É—î —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –¥–∞–Ω—ñ –ø—Ä–∏–ª–∞–¥—ñ–≤ –æ–±–ª—ñ–∫—É.
    
        –ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é API-–∑–∞–ø–∏—Ç—ñ–≤, –ø—Ä–æ–≥—Ä–∞–º–∞ –æ—Ç—Ä–∏–º—É—î –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –≤—ñ–¥ —Å—Ç–æ—Ä–æ–Ω–Ω—å–æ–≥–æ –¥–æ–¥–∞—Ç–∫–∞. –ü—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤–æ–Ω–∏ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ø–æ—Ç—Ä–µ–± —Ç–∞ –ø–æ—Ä—ñ–≤–Ω—é—é—Ç—å—Å—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –≤ MS SQL. –£ –≤–∏–ø–∞–¥–∫—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ, –ø—Ä–æ–≥—Ä–∞–º–∞ –º–æ–∂–µ –≤–∏–∫–æ–Ω–∞—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –∞–±–æ –≤–Ω–µ—Å–µ–Ω–Ω—è –∑–º—ñ–Ω —É –ë–î —Å—Ç–æ—Ä–æ–Ω–Ω—å–æ–≥–æ –¥–æ–¥–∞—Ç–∫–∞.
        
        –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó Delphi –¥–æ–∑–≤–æ–ª—è—î —Å—Ç–≤–æ—Ä–∏—Ç–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π —Ç–∞ –∑—Ä—É—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –î–æ–¥–∞—Ç–æ–∫ –¥–æ–∑–≤–æ–ª—è—î –∑ –ª–µ–≥–∫—ñ—Å—Ç—é –≤–∑–∞—î–º–æ–¥—ñ—è—Ç–∏ –∑ API —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑—É–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö, –∑–∞–±–µ–∑–ø–µ—á—É—é—á–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–º –æ–±–º—ñ–Ω–æ–º –º—ñ–∂ —Ä—ñ–∑–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏.
    """)
    st.subheader("GLPI –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ –∑–≤—ñ—Ç–∏")
    st.caption('Streamlit + RestAPI')
    st.write("""
        –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î —Å–æ–±–æ—é –≤–µ–±-–¥–æ–¥–∞—Ç–æ–∫, —Ä–æ–∑—Ä–æ–±–ª–µ–Ω–∏–π –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Streamlit —Ç–∞ RestAPI, —è–∫–∏–π –Ω–∞–¥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É –¥–∞–Ω–∏—Ö –∑ —Å–∏—Å—Ç–µ–º–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –Ü–¢-—Ä–µ—Å—É—Ä—Å–∞–º–∏ GLPI. –î–æ–¥–∞—Ç–æ–∫ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ –Ω–∞–±–æ—Ä—É –¥–∞—à–±–æ—Ä–¥—ñ–≤, —è–∫—ñ –¥–æ–∑–≤–æ–ª—è—é—Ç—å –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∫–ª—é—á–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–∞ —Å—Ç–∞–Ω—É –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è.
    
        –û–¥–∏–Ω –∑ –¥–∞—à–±–æ—Ä–¥—ñ–≤ –Ω–∞–¥–∞—î –æ–≥–ª—è–¥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç—ñ–∫–µ—Ç—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è. –ö—Ä—ñ–º —Ç–æ–≥–æ, –≤—ñ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î KPI, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ä–æ–±–æ—á–∏–π —á–∞—Å. –¶–µ –¥–æ–∑–≤–æ–ª—è—î –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞—Ç–∏ —Ç–∞ –æ—Ü—ñ–Ω—é–≤–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ–∂–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç–µ–π —Ç–∞ –æ–±—Å—è–≥—É —Ä–æ–±–æ—Ç–∏.
        
        –î—Ä—É–≥–∏–π –¥–∞—à–±–æ—Ä–¥ –æ—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Å—ñ –º–µ—Ä–µ–∂–µ–≤—ñ –ø—Ä–∏–Ω—Ç–µ—Ä–∏, –∑–∞–Ω–µ—Å–µ–Ω—ñ –≤ GLPI, —ñ –æ–ø–∏—Ç—É—î —ó—Ö –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –ø—Ä–æ—Ç–æ–∫–æ–ª—É SNMP. –¶–µ –¥–æ–∑–≤–æ–ª—è—î –∑–∞–±–µ–∑–ø–µ—á–∏—Ç–∏ —à–≤–∏–¥–∫–∏–π —Ç–∞ –∑—Ä—É—á–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–∏–Ω—Ç–µ—Ä—ñ–≤, —ó—Ö —Å—Ç–∞–Ω —Ç–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤ –º–µ—Ä–µ–∂—ñ.
        
        –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Streamlit –Ω–∞–¥–∞—î –∑—Ä—É—á–Ω–∏–π —Ç–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —â–æ —Å–ø—Ä–æ—â—É—î –≤–∑–∞—î–º–æ–¥—ñ—é –∑ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ —Ç–∞ –¥–æ–∑–≤–æ–ª—è—î —à–≤–∏–¥–∫–æ –ø—Ä–∏–π–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ —Ä—ñ—à–µ–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑—ñ–±—Ä–∞–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.
    """)
    st.subheader("–Ü–Ω—à–µ")
    st.caption("Python, PHP")
    st.write("""
        –û–∫—Ä—ñ–º  —Ä–æ–∑—Ä–æ–±–∫–∏ –≤–µ–±-–¥–æ–¥–∞—Ç–∫—ñ–≤, –º–∞—é –¥–æ—Å–≤—ñ–¥ –≤ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ñ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–∫—Ä–∏–ø—Ç—ñ–≤ –Ω–∞ –º–æ–≤–∞—Ö –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è Python —Ç–∞ PHP. –ó–¥—ñ–π—Å–Ω—é–≤–∞–≤ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é —Å–∫—Ä–∏–ø—Ç—ñ–≤ –¥–ª—è –≤–∏—Ä—ñ—à–µ–Ω–Ω—è —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–∏—Ö –∑–∞–¥–∞—á, —Ç–∞–∫–∏—Ö —è–∫ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É SIP –Ω–æ–º–µ—Ä—ñ–≤, —Ä–æ–±–æ—Ç–∞ –∑ API GSM —à–ª—é–∑–∞, –ø–∞—Ä—Å–∏–Ω–≥ SMS –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç–∞ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è SIM-–∫–∞—Ä—Ç —á–µ—Ä–µ–∑ GSM —à–ª—é–∑. –¢–∞–∫–æ–∂ –∑–∞–π–º–∞–≤—Å—è –æ–±—Ä–æ–±–∫–æ—é CSV —Ç–∞ XML —Ñ–∞–π–ª—ñ–≤, —â–æ –¥–æ–∑–≤–æ–ª—è–ª–æ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤–∑–∞—î–º–æ–¥—ñ—è—Ç–∏ –∑ —Ä—ñ–∑–Ω–∏–º–∏ –¥–∂–µ—Ä–µ–ª–∞–º–∏ –¥–∞–Ω–∏—Ö. –ú–∞—é –¥–æ—Å–≤—ñ–¥ —É –≤–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—ñ —Ç–∞ –≤–¥–æ—Å–∫–æ–Ω–∞–ª–µ–Ω–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∏—Ö —Å–∫—Ä–∏–ø—Ç—ñ–≤, —â–æ —Å–ø—Ä–∏—è—î –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—é –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó —Ä—É—Ç–∏–Ω–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å.
    """)


def page3():
    st.subheader("Live demo")
    # –û–ø–∏—Å —Ä–æ–∑–¥—ñ–ª—É
    st.write("""
            –£ —Ü—å–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ –≤–∏ –∑–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è –≤ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–∞ –ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è **Python** —Ç–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö **API**.  
            –ñ–∏–≤—ñ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –≤–∫–ª—é—á–∞—é—Ç—å –≤ —Å–µ–±–µ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ —Å–∫—Ä–∏–ø—Ç–∏ —Ç–∞ –≤—ñ–¥–∂–µ—Ç–∏, —Ä–æ–∑—Ä–æ–±–ª–µ–Ω—ñ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º **Streamlit**.
        """)
    st.divider()
    col1, col2, col_null = st.columns(3)
    with col1:
        st.subheader("–ú–∞–≥—ñ—á–Ω–∏–π —à–∞—Ä –¥–æ–ª—ñ ))")
        st.write("–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è, —ñ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É.")
        btn_ask = st.button("–¢–∞–∫, —á–∏ –ù—ñ?")
        if btn_ask:
            data = YesNo()
            answer = data.get('answer')
            st.write(f'–í—ñ–¥–ø–æ–≤—ñ–¥—å –¥–æ–ª—ñ:  :red[**{answer}**]')
            st.image(data.get('image'), width=150)
    with col2:
        st.subheader("WebCam")
        st.write("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Web –∫–∞–º–µ—Ä–∏, —è–∫—â–æ –≤–æ–Ω–∞ —î )).")
        webcam = st.empty()
        cam_btn1, cam_btn2 = st.columns(2)
        with cam_btn1:
            cam_on = st.button("–£–≤—ñ–º–∫–Ω—É—Ç–∏ –∫–∞–º–µ—Ä—É")
        with cam_btn2:
            cam_off = st.button("–í–∏–º–∫–Ω—É—Ç–∏ –∫–∞–º–µ—Ä—É")
        if cam_on:
            pic = webcam.camera_input("Take a picture", label_visibility="hidden")
            if pic:
                st.image(pic)

        if cam_off:
            webcam.camera_input("Take a picture", disabled=True)
            webcam.empty()

    st.divider()
    block = BlockChain()
    df = pd.DataFrame(block["values"], columns=["x", "y"])

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ timestamp –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    df["x"] = pd.to_datetime(df["x"], unit="s").dt.strftime('%d-%m-%Y %H:%M:%S')

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

    st.subheader("–®–≤–∏–¥–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π")
    st.write("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π Bitcoin, —è–∫—ñ –¥–æ–¥–∞—é—Ç—å—Å—è –¥–æ –ø—É–ª—É –Ω–∞ —Å–µ–∫—É–Ω–¥—É")

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    fig = px.line(df, x="x", y="y", labels={"x": "–ß–∞—Å–æ–≤–∞ –º—ñ—Ç–∫–∞", "y": "–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π —É —Å–µ–∫."})
    st.plotly_chart(fig, use_container_width=True)
    st.divider()

    st.subheader("–û—Ñ—ñ—Ü—ñ–π–Ω–∏–π –∫—É—Ä—Å –≥—Ä–∏–≤–Ω—ñ –¥–æ —ñ–Ω–æ–∑–µ–º–Ω–∏—Ö –≤–∞–ª—é—Ç —Ç–∞ –æ–±–ª—ñ–∫–æ–≤–∞ —Ü—ñ–Ω–∞ –±–∞–Ω–∫—ñ–≤—Å—å–∫–∏—Ö –º–µ—Ç–∞–ª—ñ–≤")
    ex_col1, ex_col2, ex_calc_col = st.columns([1, 2, 2])
    with ex_col1:
        d = st.date_input("–ó–∞ —è–∫—É –¥–∞—Ç—É –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫—É—Ä—Å?", format="DD.MM.YYYY")
        current_date = datetime.now().date()
        if d > current_date:
            st.warning("–û–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É.")
            d = current_date
        formatted_date = d.strftime("%Y%m%d")
        data = Exchange(formatted_date)
    with ex_col2:
        df_ex = pd.DataFrame(data)
        # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–ª–æ–Ω–∫—É
        df_ex = df_ex.iloc[:, :-1]
        df_ex = df_ex.iloc[:, [0, 3, 1, 2]]
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        df_ex.columns = ["–ö–æ–¥", "alfa-3", "–ù–∞–∑–≤–∞", "–ö—É—Ä—Å, –≥—Ä–Ω."]
        st.dataframe(df_ex, hide_index=True, use_container_width=True, height=460)
    with ex_calc_col:
        with st.form('calc'):
            st.subheader("–ö–æ–Ω–≤–µ—Ä—Ç–æ—Ä –≤–∞–ª—é—Ç", divider='rainbow')
            frm_col1, frm_col2 = st.columns(2)
            with frm_col1:
                order = st.number_input('–°—É–º–∞')
                cc_2 = st.selectbox('–í —è–∫—É –≤–∞–ª—é—Ç—É –∫–æ–Ω–≤–µ—Ä—É—î–º–æ?', df_ex['alfa-3'])
            with frm_col2:
                cc_1 = st.selectbox('–í–∞–ª—é—Ç–∞', df_ex['alfa-3'])

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ loc –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è "–ö—É—Ä—Å, –≥—Ä–Ω." –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É "alfa-3"
            selected_row = df_ex.loc[df_ex['alfa-3'] == cc_1]
            kurs_value = selected_row.iloc[0]['–ö—É—Ä—Å, –≥—Ä–Ω.']
            selected_row2 = df_ex.loc[df_ex['alfa-3'] == cc_2]
            kurs_value2 = selected_row2.iloc[0]['–ö—É—Ä—Å, –≥—Ä–Ω.']

            submitted = st.form_submit_button("–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏")
            if submitted:
                res = order * kurs_value
                result = res * (1 / kurs_value2)
                st.divider()
                st.write(f"{order} {cc_1} = **{res:.2f}** UAH.")
                st.write(f"{order} {cc_1} = **{result:.2f}** {cc_2} —á–µ—Ä–µ–∑ UAH.")

    st.divider()


def main():
    # --------- SIDEBAR --------------------------
    sidebar = st.sidebar
    sidebar.title("–ê–Ω–¥—Ä–æ—â—É–∫ –ú–∞–∫—Å–∏–º –í–æ–ª–æ–¥–∏–º–∏—Ä–æ–≤–∏—á")
    sidebar.markdown(
        f'''*"–£ —Å–≤—ñ—Ç—ñ —Ç–≤–æ—Ä—á–æ—Å—Ç—ñ –Ω–µ–º–∞—î –Ω–µ–¥–æ—Å—è–∂–Ω–∏—Ö –∑–∞–¥–∞—á, –∞–ª–µ —á–∞—Å—Ç–æ –∑—É—Å—Ç—Ä—ñ—á–∞—é—Ç—å—Å—è –Ω–µ–ø–æ–≤–Ω—ñ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è —á–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ä–µ—Å—É—Ä—Å—ñ–≤"*''')
    sidebar.divider()
    sidebar.markdown(f''':gray[*–≤—ñ–∫:*] **{get_age()}**  
            :gray[*–ª–æ–∫–∞—Ü—ñ—è:*] **–£–∫—Ä–∞—ó–Ω–∞, –ó–∞–ø–æ—Ä—ñ–∂–∂—è**  
            :gray[*–º–æ–±.—Ç–µ–ª.:*] **+38(068)0844808**    
            :gray[*–µ-–ø–æ—à—Ç–∞:*] **m.androschuk@gmail.com**          
            ''')

    link_col1, link_col2 = sidebar.columns(2)
    with link_col1:
        st.markdown(
            """<a href="https://www.work.ua/resumes/5553022/">
            <img src="data:image/png;base64,{}" width="100">
            </a>""".format(
                base64.b64encode(open("img/work-ua.png", "rb").read()).decode()
            ),
            unsafe_allow_html=True,
        )

    with link_col2:
        st.markdown(
            """<a href="https://ua.linkedin.com/in/maksim-androschuk-29a42885">
            <img src="data:image/png;base64,{}" width="100">
            </a>""".format(
                base64.b64encode(open("img/linkedIn.png", "rb").read()).decode()
            ),
            unsafe_allow_html=True,
        )
    sidebar.divider()

    pages = {
        '–ü—Ä–æ—Ñ—ñ–ª—å': page1,
        '–°—Ü–µ–Ω–∞—Ä—ñ—ó —Ç–∞ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è': page2,
        'Live demo': page3
    }
    sidebar.subheader("–†–æ–∑–¥—ñ–ª–∏")
    page = sidebar.radio(".", list(pages.keys()),index=0,label_visibility="collapsed")

    if page in pages:
        pages[page]()
    else:
        st.write(f"–°—Ç–æ—Ä—ñ–Ω–∫–∏ {page} –Ω–µ —ñ—Å–Ω—É—î.")

    sidebar.divider()
    copy()

if __name__ == "__main__":
    main()
